/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.diploma

import com.google.gson.Gson
import com.google.gson.JsonParser
import com.intellij.openapi.project.Project
import com.intellij.util.io.delete
import com.intellij.util.io.write
import org.jetbrains.kotlin.psi.KtElement
import java.io.BufferedReader
import java.io.File
import java.io.InputStreamReader
import java.nio.file.Files

class Pipeline(project: Project) {
    private val decoder = NewKind2Psi(project)

    fun generateFile(): KtElement {
        val file = decoder.decode("BOX_TEMPLATE")
        val notFinished = mutableListOf(file)
        walk(file, file, notFinished)

        return file
    }

    private fun walk(file: KtElement, current: KtElement, notFinished: MutableList<KtElement>, depth: Int = 0) {
        if (depth > 7) {
            notFinished.removeIf { it === current }
            return
        }

        // autogenerated children (e.g. Body in function)
        if (current.children.isNotEmpty()) {
            notFinished += current.children.map { it as KtElement }
            current.children.filterIsInstance(KtElement::class.java).forEach { walk(file, it, notFinished, depth + 1) }
        }

        while (true) {
            if (current.children.size > 7) {
                notFinished.removeIf { it === current }
                return
            }

            try {
                val jsonDatasetSample = createSampleForPredict(file, current, notFinished, emptyMap(), emptyList()).json()
                val predictedNode = predictNode(jsonDatasetSample.toIntegerDatasetSample())
                val newChild = current.append(decoder.decode(predictedNode))
                newChild.children.forEach { it.delete() }

                if (!newChild.isTerminal()) {
                    notFinished += newChild
                    walk(file, newChild, notFinished, depth + 1)
                }
            } catch (_: AfterLastException) {
                notFinished.removeIf { it === current }
                return
            }
        }
    }

    private fun String.toIntegerDatasetSample(): String {
        val i2s = File("/home/tihonovcore/diploma/kotlin/idea/tests/org/jetbrains/kotlin/diploma/out/integer/string2integer.json").readText()
        val string2integer = JsonParser.parseString(i2s).asJsonObject

        val sample = Gson().fromJson(this, StringDatasetSample::class.java)
        return listOf(
            IntegerDatasetSample(
                sample.leafPaths.map { path -> path.map { node -> string2integer[node]!!.asInt } },
                sample.rootPath.map { node -> string2integer[node]!!.asInt },
                sample.typesForLeafPaths,
                sample.typesForRootPath,
                sample.leftBrothers.map { node -> string2integer[node]!!.asInt },
                sample.indexAmongBrothers,
                444 //NOTE: unused, but model expects
            )
        ).json()
    }

    private fun KtElement.isTerminal(): Boolean {
        //TODO: add other terminals
        //TODO: continue is terminal?? what is `contunue@loop`?
        return kind() in listOf("INTEGER_CONSTANT", "REFERENCE_EXPRESSION", "OPERATION_REFERENCE", "CONTINUE", AFTER_LAST_KIND)
    }

    private fun predictNode(jsonDatasetSample: String): String {
        val file = Files.createTempFile("dataset", ".json")
        file.write(jsonDatasetSample)

        // call `predict.py`
        val predict = "/home/tihonovcore/diploma/model/predict.py"
        val dataset = file.toAbsolutePath().toString()

        val process = Runtime.getRuntime().exec("python3 $predict --json_path=$dataset")
        process.waitFor()

        // return result
        val result = BufferedReader(InputStreamReader(process.inputStream)).readText()
        val error = BufferedReader(InputStreamReader(process.errorStream)).readText()

        file.delete()

        return result.dropLast(1) // drop `\n`
    }

    object AfterLastException : Exception()
}
