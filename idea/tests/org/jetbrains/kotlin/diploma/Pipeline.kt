/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.diploma

import com.intellij.openapi.project.Project
import org.jetbrains.kotlin.diploma.decoder.Decoder
import org.jetbrains.kotlin.psi.KtElement

class Pipeline(project: Project) {
    private val decoder = Decoder(project)

    fun generateFile(): KtElement {
        val file = decoder.decode("FILE")
        walk(file, file)

        return file
    }

    private fun walk(file: KtElement, current: KtElement) {
        // autogenerated children (e.g. Body in function)
        if (current.children.isNotEmpty()) {
            current.children.filterIsInstance(KtElement::class.java).forEach { walk(file, it) }
            return
        }

        while (true) {
            try {
                val paths = extractPaths(file, current)
                val predictedNode = predictNode(paths)
                val newChild = current.add(decoder.decode(predictedNode)) as KtElement

                if (!newChild.isTerminal()) {
                    walk(file, newChild)
                }
            } catch (e: AfterLast) {
                break
            }
        }
    }

    private fun KtElement.isTerminal(): Boolean {
        //TODO: add other terminals
        //TODO: continue is terminal?? what is `contunue@loop`?
        return node.elementType.toString() in listOf("INTEGER_CONSTANT", "REFERENCE_EXPRESSION", "OPERATION_REFERENCE", "CONTINUE")
    }

    private var step = 0
    private fun predictNode(paths: Pair<List<String>, String>): String {
        //TODO: надо вызывать модельку
        val nodes = listOf(
            "CLASS",
            "FUN",
            "@params",
            "WHILE",
            "BINARY_EXPRESSION", "REFERENCE_EXPRESSION", "OPERATION_REFERENCE", "INTEGER_CONSTANT", "@bin_expr",
            "@while_cond",

            "IF",
            "BINARY_EXPRESSION", "INTEGER_CONSTANT", "OPERATION_REFERENCE", "REFERENCE_EXPRESSION", "@bin_expr",
            "@if_cond",

            "INTEGER_CONSTANT", "CONTINUE", "@then",

            "@else",
            "@while_body",
            "@fun_body",
            "@class_body",
            "@file_body"
        )

        val current = nodes[step++]
        if (current.contains('@')) {
            throw AfterLast
        } else {
            return current
        }
    }

    private object AfterLast : Exception()
}
